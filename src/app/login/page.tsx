import { createClientCSROnly } from "../utils/server/supabase/client";
import { login, signup } from "./actions";

export default function LoginPage() {
	return (
		<div>
			{/* This div and the next one (g_id_signin) were auto generated by google to my specifications
				https://developers.google.com/identity/gsi/web/tools/configurator
			*/}
			<div
				id="g_id_onload"
				// Got this client id from my GCP Mileagebuddy project page. It's the Project id, not the client id
				data-client_id="mileagebuddy-449116"
				data-context="signin"
				data-ux_mode="popup"
				data-callback="handleSignInWithGoogle"
				data-itp_support="true"
				// This wasn't in the code that google generated for me, but Supabase docs said to set this to true
				// https://supabase.com/docs/guides/auth/social-login/auth-google?queryGroups=environment&environment=client#google-pre-built
				data-use_fedcm_for_prompt="true"
			></div>

			<div
				className="g_id_signin"
				data-type="standard"
				data-shape="rectangular"
				data-theme="outline"
				data-text="signin_with"
				data-size="large"
				data-logo_alignment="left"
			></div>

			<form>
				<label htmlFor="email">Email:</label>
				<input id="email" name="email" type="email" required />
				<label htmlFor="password">Password:</label>
				<input id="password" name="password" type="password" required />
				<button formAction={login}>Log in</button>
				<button formAction={signup}>Sign up</button>
			</form>
		</div>
	);
}

/**DO NOT CHANGE THIS FUNCTION NAME
 *
 * My GCP project for google auth is specifically configured to look for the function by this name. If you need to change it, go to the GCP project and update the function name there as well
 * https://developers.google.com/identity/gsi/web/tools/configurator
 *
 * This function isn't called in our code, Google looks for it (must be in the global scope) and calls it when appropriate.
 */
async function handleSignInWithGoogle(response) {
	const { data, error } = await supabase.auth.signInWithIdToken({
		provider: "google",
		token: response.credential,
	});
}

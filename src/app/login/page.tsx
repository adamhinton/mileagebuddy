"use client";

import { useState, useEffect } from "react";
import { createClientCSROnly } from "../utils/server/supabase/client";
import { login, signup } from "./actions";

export default function LoginPage() {
	const [isMounted, setIsMounted] = useState(false);

	// I copied this section from the internet
	// Hope it doesn't fail
	// The issue here is something to do with the google auth script not loading properly unless I do this
	// If we didn't do this isMoutned stuff, we would get an error due to mismatch between server and client HTML
	// I don't know why
	// help me
	useEffect(() => {
		setIsMounted(true);
		// Dynamically load the Google GSI script
		const script = document.createElement("script");
		script.src = "https://accounts.google.com/gsi/client";
		script.async = true;
		script.defer = true;
		document.body.appendChild(script);

		return () => {
			document.body.removeChild(script);
		};
	}, []);

	return (
		<div>
			{isMounted && (
				<>
					{/* This div and the next one (g_id_signin) were auto generated by Googleâ€™s configurator */}
					<div
						id="g_id_onload"
						data-client_id="220043080394-n7is08dpuk1iv2kbbif6isaq9l5d1lsn.apps.googleusercontent.com"
						data-context="signin"
						data-ux_mode="popup"
						data-callback="handleSignInWithGoogle"
						data-itp_support="true"
						data-use_fedcm_for_prompt="true"
					></div>

					<div
						className="g_id_signin"
						data-type="standard"
						data-shape="rectangular"
						data-theme="outline"
						data-text="signin_with"
						data-size="large"
						data-logo_alignment="left"
					></div>
				</>
			)}

			{/* TODO: Consider using react-hook-form or preferred form library */}
			<form>
				<label htmlFor="email">Email:</label>
				<input id="email" name="email" type="email" required />
				<label htmlFor="password">Password:</label>
				<input id="password" name="password" type="password" required />
				<button formAction={login}>Log in</button>
				<button formAction={signup}>Sign up</button>
			</form>

			{/* TODO: Put logout button in header or something */}
			<button
				onClick={async () => {
					const supabase = createClientCSROnly();
					await supabase.auth
						.signOut()
						.then(() => {
							console.log("Logged out");
						})
						.catch((error) => {
							console.error("Error logging out:", error.message);
						});
				}}
			>
				Log Out (Test)
			</button>
		</div>
	);
}

// Google's auth API expects this function to be in the global scope
// It's kinda clunky but it works
// DO NOT CHANGE THIS FUNCTION NAME, ITS NAME IS REFERENCED IN THE GOOGLE GSI SCRIPT
// @ts-expect-error not sure what to type this
globalThis.handleSignInWithGoogle = async function handleSignInWithGoogle(
	// @ts-expect-error not sure what to type this
	response
) {
	console.log("handleSignInWithGoogle starting");

	console.log(
		"handleSignInWithGoogle response PARAMETER, not return item:",
		response
	);

	const supabase = createClientCSROnly();

	// TODO: More auth flow here
	const signedInUser = await supabase.auth.getUser();
	console.log("signedInUser:", signedInUser);

	const { data, error } = await supabase.auth.signInWithIdToken({
		provider: "google",
		token: response.credential,
	});

	if (error) {
		console.error("Error signing in with Google:", error.message);
	} else {
		console.log("Successfully signed in with Google:", data);
	}
};

// AUTH PLAN:
// On page load, check if user is logged in
// If they are, redirect them to the dashboard
// If not, go to login
// Button to proceed without logging in

// AUTH.users table:
// https://supabase.com/docs/guides/auth/managing-user-data
// Add dark mode preference
// Update vehicles table to reference auth.users with relevant id
// Update users endpoint to reference auth.users

// GOOGLE STUFF:
// Make any google auth changes be reflected in users table

// 	supabase.auth.updateUser(
// 	{

// 	}
// )

// Seeding auth.users:
// https://www.reddit.com/r/Supabase/comments/uy8lku/how_to_seed_user_records/

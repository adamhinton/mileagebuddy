"use client";

import { useState, useEffect } from "react";
import { createClientCSROnly } from "../utils/server/supabase/client";
import { login, signup } from "./actions";

export default function LoginPage() {
	const [mounted, setMounted] = useState(false);

	useEffect(() => {
		setMounted(true);
		// Dynamically load the Google GSI script
		const script = document.createElement("script");
		script.src = "https://accounts.google.com/gsi/client";
		script.async = true;
		script.defer = true;
		document.body.appendChild(script);

		return () => {
			document.body.removeChild(script);
		};
	}, []);

	console.log("this should be client");

	return (
		<div>
			{mounted && (
				<>
					{/* This div and the next one (g_id_signin) were auto generated by Googleâ€™s configurator */}
					<div
						id="g_id_onload"
						data-client_id="220043080394-n7is08dpuk1iv2kbbif6isaq9l5d1lsn.apps.googleusercontent.com"
						data-context="signin"
						data-ux_mode="popup"
						data-callback="handleSignInWithGoogle"
						data-itp_support="true"
						data-use_fedcm_for_prompt="true"
					></div>

					<div
						className="g_id_signin"
						data-type="standard"
						data-shape="rectangular"
						data-theme="outline"
						data-text="signin_with"
						data-size="large"
						data-logo_alignment="left"
					></div>
				</>
			)}

			{/* TODO: Consider using react-hook-form or your preferred form library */}
			<form>
				<label htmlFor="email">Email:</label>
				<input id="email" name="email" type="email" required />
				<label htmlFor="password">Password:</label>
				<input id="password" name="password" type="password" required />
				<button formAction={login}>Log in</button>
				<button formAction={signup}>Sign up</button>
			</form>
		</div>
	);
}

// @ts-expect-error not sure what to type this
globalThis.handleSignInWithGoogle = async function handleSignInWithGoogle(
	// @ts-expect-error not sure what to type this
	response
) {
	console.log("handleSignInWithGoogle starting");

	console.log(
		"handleSignInWithGoogle response PARAMETER, not return item:",
		response
	);

	const supabase = createClientCSROnly();

	const { data, error } = await supabase.auth.signInWithIdToken({
		provider: "google",
		token: response.credential,
	});

	// const myResponse = supabase.auth.signInWithOAuth({
	// 	provider: "google",
	// 	options: {
	// 		redirectTo: "http://localhost:3000/", //after the google redirect, we need to redirect to this route
	// 		queryParams: {
	// 			access_type: "offline",
	// 			prompt: "consent",
	// 		},
	// 	},
	// });

	// console.log("myResponse:", myResponse);

	if (error) {
		console.error("Error signing in with Google:", error.message);
	} else {
		console.log("Successfully signed in with Google:", data);
	}
};
